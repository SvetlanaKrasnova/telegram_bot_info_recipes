import asyncio
import aiohttp
from random import choices
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram import Router, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.formatting import Bold, as_list, as_section
from aiogram import F
from googletrans import Translator
from utils.suffix_text_meals import show_suffix
from interfaces.api_themealdb import get_categories, get_recipes_by_category, get_recipe_by_id

translator = Translator()
router = Router()


class OrderRecipes(StatesGroup):
    choosing_category = State()
    selected_recipes = State()


@router.message(Command("category_search_random"))
async def recipes(message: Message, command: CommandObject, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /category_search_random
    :param message:
    :param command:
    :param state:
    :return:
    """
    if command.args is None:
        await message.answer('–í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å. üôÇ\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —á–∏—Å–ª–æ.\n'
                             '–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ "/category_search_random 2"')
        return

    try:
        int(command.args)
    except:
        await message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ "{command.args}'
                             f'\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:\n"/category_search_random 1"')
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —á–∏—Å–ª–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
    await state.set_data({'count_recipes': int(command.args)})

    async with aiohttp.ClientSession() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = await get_categories(session)
        await state.update_data({'categories': categories})

        # –ò –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
        builder = ReplyKeyboardBuilder()
        for date_item in categories:
            builder.add(types.KeyboardButton(text=date_item))
        builder.adjust(2)

        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup(resize_keyboard=True))
        await state.set_state(OrderRecipes.choosing_category.state)


@router.message(OrderRecipes.choosing_category)
async def recipes_by_category(message: types.Message, state: FSMContext):
    """
    –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.
    –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (meals) –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param message:
    :param state:
    :return:
    """
    data = await state.get_data()
    if not message.text or not message.text in data['categories']:
        await message.answer(f'–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Ç.\n'
                             f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö. üôÇ')
        return

    async with aiohttp.ClientSession() as session:
        meals = await get_recipes_by_category(session=session, category=message.text)
        if not meals:
            await message.answer(f'–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{message.text}" —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n'
                                 f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.')
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
        # –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Ö id
        # –ï—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # –ü–∏—à–µ–º –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç
        count_recipes = int(data['count_recipes'])
        meals_len = meals.__len__()
        if count_recipes > meals_len or count_recipes == meals_len:
            selected_meals = meals
            text_message = f'–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ "{meals_len}" —Ä–µ—Ü–µ–ø—Ç{show_suffix(meals_len)}'
        else:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
            selected_meals = choices(meals, k=count_recipes)
            text_message = '–ö–∞–∫ –≤–∞–º —Ç–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã'

        text_meals = [translator.translate(el.str_meal, dest='ru').text for el in selected_meals]
        await state.set_data({'id_meals': [el.id_meal for el in selected_meals]})

        builder = ReplyKeyboardBuilder()
        builder.add(types.KeyboardButton(text='–ü–æ–∫–∞–∂–∏ —Ä–µ—Ü–µ–ø—Ç—ã'))
        builder.adjust(1)

        await message.answer(f"{text_message}: {', '.join(text_meals)}",
                             reply_markup=builder.as_markup(resize_keyboard=True))
        await state.set_state(OrderRecipes.selected_recipes.state)


@router.message(OrderRecipes.selected_recipes)
async def show_recipes(message: types.Message, state: FSMContext):
    """
    –õ–æ–≥–∏–∫–∞ –ø–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∂–∏ —Ä–µ—Ü–µ–ø—Ç—ã")
    :param message:
    :param state:
    :return:
    """
    data = await state.get_data()
    async with aiohttp.ClientSession() as session:
        recipes = await asyncio.gather(*[get_recipe_by_id(session, id_meal) for id_meal in data['id_meals']])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã, –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        recipes_not_found = list(filter(lambda x: x.status == 'Error', recipes))

        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ—Ü–µ–ø—Ç—ã
        for recipe in recipes:
            # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç - –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if recipe.status == 'Success':
                title_recipe = translator.translate(recipe.str_meal, dest='ru').text
                text_recipe = translator.translate(recipe.str_instructions, dest='ru').text
                ingredients = [translator.translate(v, dest='ru').text for v in recipe.ingredients]

                response = as_list(
                    as_section(Bold(f"üìå {title_recipe}")),
                    as_section(Bold("üìñ –†–µ—Ü–µ–ø—Ç:"), f"{text_recipe}\n"),
                    as_section(Bold("üìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:"), f"{', '.join(ingredients)}"))

                await message.answer(**response.as_kwargs(), reply_markup=types.ReplyKeyboardRemove())

        if recipes_not_found:
            text_message = "–ü–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –±–ª—é–¥–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å" if recipes else "–ù–µ —É–¥–∞–ª–æ—Å—å"
            await message.answer(f"{text_message} –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã üòî.", reply_markup=types.ReplyKeyboardRemove())

        await state.clear()


@router.message(F.text)
async def any_text_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç–µ–∫—Å—Ç, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    :param message:
    :return:
    """
    await message.answer(f'–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Ç.\n'
                         f'–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π, –Ω–∞–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É '
                         f'"/start" üôÇ')
